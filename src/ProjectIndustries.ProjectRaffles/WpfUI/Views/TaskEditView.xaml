<rxui:ReactiveUserControl
  x:Class="ProjectIndustries.ProjectRaffles.WpfUI.Views.TaskEditView"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:controls="clr-namespace:ProjectIndustries.ProjectRaffles.WpfUI.Controls"
  xmlns:conv="clr-namespace:ProjectIndustries.ProjectRaffles.WpfUI.Infra.Converters"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:rxui="http://reactiveui.net"
  xmlns:tasks="clr-namespace:ProjectIndustries.ProjectRaffles.Core.ViewModels.Tasks"
  xmlns:vm="clr-namespace:ProjectIndustries.ProjectRaffles.Core.ViewModels"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  d:DataContext="{d:DesignInstance tasks:TaskEditViewModel,
                                   IsDesignTimeCreatable=False}"
  d:DesignHeight="535"
  d:DesignWidth="1000"
  x:TypeArguments="tasks:TaskEditViewModel"
  mc:Ignorable="d">
  <Grid>
    <Button
      HorizontalAlignment="Stretch"
      VerticalAlignment="Stretch"
      Background="#000"
      Command="{Binding CloseCommand}"
      Opacity=".47"
      Style="{StaticResource IconButton}" />
    <Border
      x:Name="Container"
      Width="900"
      MinHeight="435"
      Padding="22,24"
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      Background="#1F1F1F"
      CornerRadius="7">
      <Border.Resources>
        <ResourceDictionary>
          <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="pack://application:,,,/ProjectIndustries.ProjectRaffles;component/WpfUI/Controls/ReleaseGroupListBox.xaml" />
            <ResourceDictionary Source="pack://application:,,,/ProjectIndustries.ProjectRaffles;component/WpfUI/Controls/ReleaseGroupListBoxItem.xaml" />
          </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
      </Border.Resources>
      <Grid>
        <Grid.Resources>
          <Style BasedOn="{StaticResource StandardLabel}" TargetType="TextBlock">
            <Setter Property="Margin" Value="0,18,0,4" />
          </Style>
          <Style BasedOn="{StaticResource StandardComboBox}" TargetType="ComboBox" />
          <Style BasedOn="{StaticResource WatermarkTextBox}" TargetType="{x:Type xctk:WatermarkTextBox}" />

          <Style x:Key="RaffleModuleItem" TargetType="ListBoxItem">
            <Setter Property="Background" Value="#171717" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Padding" Value="24" />
            <Setter Property="Height" Value="125" />
            <Setter Property="MinWidth" Value="200" />
            <Setter Property="BorderBrush" Value="#303030" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="FontSize" Value="42" />
            <Setter Property="Margin" Value="0,0,10,0" />
            <Setter Property="Foreground" Value="#2d2d2d" />
            <Setter Property="FontWeight" Value="ExtraBold" />
            <Setter Property="FontStyle" Value="Italic" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                  <Border
                    x:Name="Bd"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="10"
                    SnapsToDevicePixels="true">
                    <ContentPresenter
                      x:Name="content"
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      TextBlock.FontSize="{TemplateBinding FontSize}" />
                  </Border>
                  <ControlTemplate.Triggers>
                    <MultiTrigger>
                      <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                      </MultiTrigger.Conditions>
                      <Setter Property="Foreground" Value="{StaticResource Item.SelectedActive.Background}" />
                    </MultiTrigger>
                    <MultiTrigger>
                      <MultiTrigger.Conditions>
                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                        <Condition Property="IsSelected" Value="True" />
                      </MultiTrigger.Conditions>
                      <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Item.SelectedInactive.Border}" />
                      <Setter Property="Foreground" Value="{StaticResource Item.SelectedActive.Background}" />
                    </MultiTrigger>
                    <MultiTrigger>
                      <MultiTrigger.Conditions>
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                        <Condition Property="IsSelected" Value="True" />
                      </MultiTrigger.Conditions>
                      <Setter Property="Foreground" Value="{StaticResource Item.SelectedActive.Background}" />
                      <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Item.SelectedActive.Border}" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
        </Grid.Resources>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock
            Height="23"
            FontSize="20"
            FontWeight="DemiBold"
            Style="{StaticResource SectionTitle}"
            Text="Create Task" />
          <xctk:WatermarkTextBox
            Grid.Column="1"
            Width="250"
            HorizontalAlignment="Center"
            Text="{Binding SearchTerm, UpdateSourceTrigger=PropertyChanged}"
            Watermark="Store name" />
          <Button
            Grid.Column="2"
            Height="Auto"
            Command="{Binding CreateCommand}"
            Style="{StaticResource DangerButton}">
            <StackPanel Orientation="Horizontal">
              <TextBlock Margin="0">
                <Run
                  FontSize="12"
                  FontWeight="SemiBold"
                  Foreground="#FF5260"
                  Text="Create Tasks" />
              </TextBlock>
              <TextBlock
                Margin="10,0,0,0"
                FontSize="2"
                Visibility="{Binding IsCreating, Converter={x:Static conv:BooleanToVisibilityTypeConverter.Instance}}">
                <Run
                  FontSize="11"
                  FontWeight="Bold"
                  Foreground="#f99"
                  Text="{Binding CreatedCount, Mode=OneWay}" />
                <Run
                  FontSize="11"
                  FontWeight="Bold"
                  Foreground="#f99"
                  Text="/" />
                <Run
                  FontSize="11"
                  FontWeight="Bold"
                  Foreground="#f99"
                  Text="{Binding Quantity, Mode=OneWay}" />
              </TextBlock>
            </StackPanel>
          </Button>
        </Grid>

        <ListBox
          Grid.Row="1"
          MinHeight="125"
          Margin="0,36,0,20"
          IsEnabled="{Binding CanModuleBeChanged}"
          ItemContainerStyle="{StaticResource RaffleModuleItem}"
          ItemsSource="{Binding Modules}"
          ScrollViewer.HorizontalScrollBarVisibility="Auto"
          SelectedItem="{Binding SelectedModuleDescriptor}"
          Style="{StaticResource ReleaseGroupListBox}">
          <ListBox.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel IsItemsHost="True" Orientation="Horizontal" />
            </ItemsPanelTemplate>
          </ListBox.ItemsPanel>
          <ListBox.ItemTemplate>
            <DataTemplate>
              <Grid>


                <StackPanel Visibility="{Binding IsActive, Converter={x:Static conv:InvertedBooleanToVisibilityTypeConverter.Instance}}">
                  <TextBlock
                    FontSize="10"
                    FontStyle="Normal"
                    FontWeight="Normal"
                    Foreground="#999"
                    Text="NOT AVAILABLE" />
                  <TextBlock
                    Height="35"
                    FontSize="30"
                    Foreground="#222"
                    Text="{Binding ModuleDescriptor.Name, Mode=OneWay, Converter={x:Static conv:ToUpperCaseTextConverter.Instance}}" />
                  <TextBlock
                    FontSize="10"
                    FontStyle="Normal"
                    FontWeight="Normal"
                    Foreground="#333"
                    Text="Module requires captcha solver" />

                </StackPanel>

                <TextBlock Text="{Binding ModuleDescriptor.Name, Mode=OneWay, Converter={x:Static conv:ToUpperCaseTextConverter.Instance}}" Visibility="{Binding IsActive, Converter={x:Static conv:BooleanToVisibilityTypeConverter.Instance}}" />

              </Grid>
              <!--<TextBlock>
                <Run Text="{Binding ModuleDescriptor.Name, Mode=OneWay, Converter={x:Static conv:ToUpperCaseTextConverter.Instance}}" />
                <Run Text="{Binding ModuleDescriptor.Name, Mode=OneWay, Converter={x:Static conv:ToUpperCaseTextConverter.Instance}}" />
              </TextBlock>-->
            </DataTemplate>
          </ListBox.ItemTemplate>
        </ListBox>
        <ScrollViewer
          Grid.Row="2"
          Padding="0,0,0,10"
          VerticalScrollBarVisibility="Auto">
          <StackPanel>
            <StackPanel Visibility="{Binding IsDynamicFormsModule, Converter={x:Static conv:BooleanToVisibilityTypeConverter.Instance}}">
              <TextBlock Text="Form Url" />
              <xctk:WatermarkTextBox
                Margin="0,0,0,10"
                Text="{Binding FormUrl, UpdateSourceTrigger=PropertyChanged}"
                Watermark="Form Url" />
            </StackPanel>

            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="75" />
              </Grid.ColumnDefinitions>
              <StackPanel>
                <TextBlock Margin="0,0,0,4" Text="Profile" />
                <ComboBox
                  Margin="0"
                  ItemsSource="{Binding Profiles}"
                  SelectedItem="{Binding SelectedProfile}">
                  <ComboBox.ItemTemplate>
                    <DataTemplate>
                      <StackPanel>
                        <TextBlock Text="{Binding Profile.ProfileName}" />
                        <TextBlock
                          FontSize="9"
                          Foreground="#999"
                          Text="No credit card"
                          Visibility="{Binding IsEnabled, Converter={x:Static conv:InvertedBooleanToVisibilityTypeConverter.Instance}}" />
                      </StackPanel>
                    </DataTemplate>
                  </ComboBox.ItemTemplate>
                  <ComboBox.ItemContainerStyle>
                    <Style BasedOn="{StaticResource StandardComboboxItemStyle}" TargetType="ComboBoxItem">
                      <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                    </Style>
                  </ComboBox.ItemContainerStyle>
                  <ComboBox.IsEnabled>
                    <MultiBinding Converter="{x:Static conv:BooleanMultiConverter.Instance}">
                      <Binding Path="AllRequiredFieldsAreFilled"></Binding>
                      <!-- <Binding Path="RequiresProfile"></Binding> -->
                    </MultiBinding>
                  </ComboBox.IsEnabled>
                </ComboBox>
              </StackPanel>
              <StackPanel Grid.Column="2">
                <TextBlock Margin="0,0,0,4" Text="Proxy Group" />
                <ComboBox
                  ItemsSource="{Binding ProxyGroups}"
                  SelectedItem="{Binding SelectedProxyGroup}">
                  <ComboBox.IsEnabled>
                    <MultiBinding Converter="{x:Static conv:BooleanMultiConverter.Instance}">
                      <Binding Path="AllRequiredFieldsAreFilled"></Binding>
                      <Binding Path="RequiresProfile"></Binding>
                    </MultiBinding>
                  </ComboBox.IsEnabled>
                  <ComboBox.ItemTemplate>
                    <DataTemplate>
                      <StackPanel>
                        <TextBlock Text="{Binding ProxyGroup.Name}" />
                        <TextBlock
                          FontSize="9"
                          Foreground="#999"
                          Text="No proxies can be used"
                          Visibility="{Binding IsEnabled, Converter={x:Static conv:InvertedBooleanToVisibilityTypeConverter.Instance}}" />
                      </StackPanel>
                    </DataTemplate>
                  </ComboBox.ItemTemplate>
                  <ComboBox.ItemContainerStyle>
                    <Style BasedOn="{StaticResource StandardComboboxItemStyle}" TargetType="ComboBoxItem">
                      <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                    </Style>
                  </ComboBox.ItemContainerStyle>
                </ComboBox>
              </StackPanel>

              <StackPanel Grid.Column="4">
                <TextBlock Margin="0,0,0,4" Text="Quantity" />
                <xctk:WatermarkTextBox
                  IsEnabled="{Binding AllRequiredFieldsAreFilled}"
                  Text="{Binding Quantity, UpdateSourceTrigger=PropertyChanged}"
                  Watermark="Quantity" />
              </StackPanel>
            </Grid>

            <StackPanel x:Name="AdditionalFieldsContainer" />
          </StackPanel>
        </ScrollViewer>


      </Grid>
    </Border>
    <Border
      Grid.RowSpan="2"
      Width="{Binding ElementName=Container, Path=ActualWidth}"
      Height="{Binding ElementName=Container, Path=ActualHeight}"
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      Background="#4f000000"
      Visibility="{Binding IsBusy, Converter={x:Static conv:BooleanToVisibilityTypeConverter.Instance}}">
      <Image
        x:Name="spinner"
        Width="24"
        Height="24"
        Margin="0,0,10,0"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        RenderTransformOrigin="0.5, 0.5"
        Source="/Assets/Icons/spinner.png">
        <Image.RenderTransform>
          <RotateTransform />
        </Image.RenderTransform>
        <Image.Triggers>
          <EventTrigger RoutedEvent="Image.Loaded">
            <BeginStoryboard>
              <Storyboard>
                <DoubleAnimation
                  AutoReverse="False"
                  RepeatBehavior="Forever"
                  Storyboard.TargetName="spinner"
                  Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                  From="0"
                  To="360"
                  Duration="0:0:1" />
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Image.Triggers>
      </Image>
    </Border>
  </Grid>
</rxui:ReactiveUserControl>